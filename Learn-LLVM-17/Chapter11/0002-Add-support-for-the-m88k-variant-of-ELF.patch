From 87284909b314f7f84457c4755497bb5ffcaca5f0 Mon Sep 17 00:00:00 2001
From: Kai Nacke <kai@redstar.de>
Date: Thu, 17 Aug 2023 09:03:26 -0400
Subject: [PATCH 2/6] Add support for the m88k variant of ELF.

---
 llvm/include/llvm/BinaryFormat/ELF.h          | 11 +++
 .../llvm/BinaryFormat/ELFRelocs/M88k.def      | 75 +++++++++++++++++++
 llvm/include/llvm/MC/MCELFObjectWriter.h      |  2 +
 llvm/include/llvm/Object/ELFObjectFile.h      |  4 +
 llvm/lib/Object/ELF.cpp                       |  7 ++
 llvm/lib/Object/ELFObjectFile.cpp             |  3 +
 llvm/lib/ObjectYAML/ELFYAML.cpp               |  3 +
 7 files changed, 105 insertions(+)
 create mode 100644 llvm/include/llvm/BinaryFormat/ELFRelocs/M88k.def

diff --git a/llvm/include/llvm/BinaryFormat/ELF.h b/llvm/include/llvm/BinaryFormat/ELF.h
index f5a7cdb387a6..6b64c41e2b4c 100644
--- a/llvm/include/llvm/BinaryFormat/ELF.h
+++ b/llvm/include/llvm/BinaryFormat/ELF.h
@@ -503,6 +503,17 @@ enum {
 #include "ELFRelocs/AVR.def"
 };
 
+// M88k Specific e_flags
+enum : unsigned {
+  EF_88K_NABI = 0x80000000,   // Not ABI compliant
+  EF_88K_M88110 = 0x00000004  // File uses 88110-specific features
+};
+
+// M88k relocations.
+enum {
+#include "ELFRelocs/M88k.def"
+};
+
 // Mips Specific e_flags
 enum : unsigned {
   EF_MIPS_NOREORDER = 0x00000001, // Don't reorder instructions
diff --git a/llvm/include/llvm/BinaryFormat/ELFRelocs/M88k.def b/llvm/include/llvm/BinaryFormat/ELFRelocs/M88k.def
new file mode 100644
index 000000000000..50f2fa367225
--- /dev/null
+++ b/llvm/include/llvm/BinaryFormat/ELFRelocs/M88k.def
@@ -0,0 +1,75 @@
+
+#ifndef ELF_RELOC
+#error "ELF_RELOC must be defined"
+#endif
+
+// Based on:
+// SYSTEM V APPLICATION BINARY INTERFACE, Motorola 88000 Processor Supplement
+// See: https://archive.org/details/bitsavers_attunixSysa0138776555SystemVRelease488000ABI1990_8011463
+
+ELF_RELOC(R_88K_NONE, 0)
+ELF_RELOC(R_88K_COPY, 1)
+ELF_RELOC(R_88K_GOTP_ENT, 2)
+ELF_RELOC(R_88K_8, 4)
+ELF_RELOC(R_88K_8S, 5)
+ELF_RELOC(R_88K_16S, 7)
+ELF_RELOC(R_88K_DISP16, 8)
+ELF_RELOC(R_88K_DISP26, 10)
+ELF_RELOC(R_88K_PLT_DISP26, 14)
+ELF_RELOC(R_88K_BBASED_32, 16)
+ELF_RELOC(R_88K_BBASED_32UA, 17)
+ELF_RELOC(R_88K_BBASED_16H, 18)
+ELF_RELOC(R_88K_BBASED_16L, 19)
+ELF_RELOC(R_88K_ABDIFF_32, 24)
+ELF_RELOC(R_88K_ABDIFF_32UA, 25)
+ELF_RELOC(R_88K_ABDIFF_16H, 26)
+ELF_RELOC(R_88K_ABDIFF_16L, 27)
+ELF_RELOC(R_88K_ABDIFF_16, 28)
+ELF_RELOC(R_88K_32, 32)
+ELF_RELOC(R_88K_32UA, 33)
+ELF_RELOC(R_88K_16H, 34)
+ELF_RELOC(R_88K_16L, 35)
+ELF_RELOC(R_88K_16, 36)
+ELF_RELOC(R_88K_GOT_32, 40)
+ELF_RELOC(R_88K_GOT_32UA, 41)
+ELF_RELOC(R_88K_GOT_16H, 42)
+ELF_RELOC(R_88K_GOT_16L, 43)
+ELF_RELOC(R_88K_GOT_16, 44)
+ELF_RELOC(R_88K_GOTP_32, 48)
+ELF_RELOC(R_88K_GOTP_32UA, 49)
+ELF_RELOC(R_88K_GOTP_16H, 50)
+ELF_RELOC(R_88K_GOTP_16L, 51)
+ELF_RELOC(R_88K_GOTP_16, 52)
+ELF_RELOC(R_88K_PLT_32, 56)
+ELF_RELOC(R_88K_PLT_32UA, 57)
+ELF_RELOC(R_88K_PLT_16H, 58)
+ELF_RELOC(R_88K_PLT_16L, 59)
+ELF_RELOC(R_88K_PLT_16, 60)
+ELF_RELOC(R_88K_ABREL_32, 64)
+ELF_RELOC(R_88K_ABREL_32UA, 65)
+ELF_RELOC(R_88K_ABREL_16H, 66)
+ELF_RELOC(R_88K_ABREL_16L, 67)
+ELF_RELOC(R_88K_ABREL_16, 68)
+ELF_RELOC(R_88K_GOT_ABREL_32, 72)
+ELF_RELOC(R_88K_GOT_ABREL_32UA, 73)
+ELF_RELOC(R_88K_GOT_ABREL_16H, 74)
+ELF_RELOC(R_88K_GOT_ABREL_16L, 75)
+ELF_RELOC(R_88K_GOT_ABREL_16, 76)
+ELF_RELOC(R_88K_GOTP_ABREL_32, 80)
+ELF_RELOC(R_88K_GOTP_ABREL_32UA, 81)
+ELF_RELOC(R_88K_GOTP_ABREL_16H, 82)
+ELF_RELOC(R_88K_GOTP_ABREL_16L, 83)
+ELF_RELOC(R_88K_GOTP_ABREL_16, 84)
+ELF_RELOC(R_88K_PLT_ABREL_32, 88)
+ELF_RELOC(R_88K_PLT_ABREL_32UA, 89)
+ELF_RELOC(R_88K_PLT_ABREL_16H, 90)
+ELF_RELOC(R_88K_PLT_ABREL_16L, 91)
+ELF_RELOC(R_88K_PLT_ABREL_16, 92)
+ELF_RELOC(R_88K_SREL_32, 96)
+ELF_RELOC(R_88K_SREL_32UA, 97)
+ELF_RELOC(R_88K_SREL_16H, 98)
+ELF_RELOC(R_88K_SREL_16L, 99)
+
+/* These are GNU extensions to enable C++ vtable garbage collection. */
+ELF_RELOC(R_88K_GNU_VTINHERIT, 100)
+ELF_RELOC(R_88K_GNU_VTENTRY, 101)
diff --git a/llvm/include/llvm/MC/MCELFObjectWriter.h b/llvm/include/llvm/MC/MCELFObjectWriter.h
index aca77f5f2687..74fbca7aa6a7 100644
--- a/llvm/include/llvm/MC/MCELFObjectWriter.h
+++ b/llvm/include/llvm/MC/MCELFObjectWriter.h
@@ -78,6 +78,8 @@ public:
       case Triple::PS4:
       case Triple::FreeBSD:
         return ELF::ELFOSABI_FREEBSD;
+      case Triple::OpenBSD:
+        return ELF::ELFOSABI_OPENBSD;
       case Triple::Solaris:
         return ELF::ELFOSABI_SOLARIS;
       default:
diff --git a/llvm/include/llvm/Object/ELFObjectFile.h b/llvm/include/llvm/Object/ELFObjectFile.h
index f3016cc141b0..0dec319ebd86 100644
--- a/llvm/include/llvm/Object/ELFObjectFile.h
+++ b/llvm/include/llvm/Object/ELFObjectFile.h
@@ -1206,6 +1206,8 @@ StringRef ELFObjectFile<ELFT>::getFileFormatName() const {
       return "elf32-hexagon";
     case ELF::EM_LANAI:
       return "elf32-lanai";
+    case ELF::EM_88K:
+      return "elf32-m88k";
     case ELF::EM_MIPS:
       return "elf32-mips";
     case ELF::EM_MSP430:
@@ -1283,6 +1285,8 @@ template <class ELFT> Triple::ArchType ELFObjectFile<ELFT>::getArch() const {
     return Triple::hexagon;
   case ELF::EM_LANAI:
     return Triple::lanai;
+  case ELF::EM_88K:
+    return Triple::m88k;
   case ELF::EM_MIPS:
     switch (EF.getHeader().e_ident[ELF::EI_CLASS]) {
     case ELF::ELFCLASS32:
diff --git a/llvm/lib/Object/ELF.cpp b/llvm/lib/Object/ELF.cpp
index 0d1862e57371..9d9defe55bef 100644
--- a/llvm/lib/Object/ELF.cpp
+++ b/llvm/lib/Object/ELF.cpp
@@ -45,6 +45,13 @@ StringRef llvm::object::getELFRelocationTypeName(uint32_t Machine,
       break;
     }
     break;
+  case ELF::EM_88K:
+    switch (Type) {
+#include "llvm/BinaryFormat/ELFRelocs/M88k.def"
+    default:
+      break;
+    }
+    break;
   case ELF::EM_MIPS:
     switch (Type) {
 #include "llvm/BinaryFormat/ELFRelocs/Mips.def"
diff --git a/llvm/lib/Object/ELFObjectFile.cpp b/llvm/lib/Object/ELFObjectFile.cpp
index 143f9d37849d..9aaa6ae9cf97 100644
--- a/llvm/lib/Object/ELFObjectFile.cpp
+++ b/llvm/lib/Object/ELFObjectFile.cpp
@@ -358,6 +358,9 @@ std::optional<StringRef> ELFObjectFileBase::tryGetCPUName() const {
   switch (getEMachine()) {
   case ELF::EM_AMDGPU:
     return getAMDGPUCPUName();
+  case ELF::EM_88K:
+    return StringRef(getPlatformFlags() & ELF::EF_88K_M88110 ? "mc88110"
+                                                             : "mc88100");
   case ELF::EM_PPC:
   case ELF::EM_PPC64:
     return StringRef("future");
diff --git a/llvm/lib/ObjectYAML/ELFYAML.cpp b/llvm/lib/ObjectYAML/ELFYAML.cpp
index e92c61d81055..2ef3cb786cab 100644
--- a/llvm/lib/ObjectYAML/ELFYAML.cpp
+++ b/llvm/lib/ObjectYAML/ELFYAML.cpp
@@ -912,6 +912,9 @@ void ScalarEnumerationTraits<ELFYAML::ELF_REL>::enumeration(
   case ELF::EM_68K:
 #include "llvm/BinaryFormat/ELFRelocs/M68k.def"
     break;
+  case ELF::EM_88K:
+#include "llvm/BinaryFormat/ELFRelocs/M88k.def"
+    break;
   case ELF::EM_LOONGARCH:
 #include "llvm/BinaryFormat/ELFRelocs/LoongArch.def"
     break;
-- 
2.40.1

